{
  "hash": "72472fd963ece8cd9a0e2b9570f00c69",
  "result": {
    "markdown": "---\ntitle: Deep dive into ggplot2 layers - II\nsubtitle: Lecture 2\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Warm up\n\n## Announcements\n\n- Thank you for filling out the survey!\n\n-   At this point everyone should be:\n    -   On Slack, in public channels for #general, #homework, #project-1, #project-2, #quizzes, and #random as well as in a private channel for their lab section.\n    -   Make sure your profile photo/avatar and name matches between GitHub and Slack.\n\n- HW 1 posted, due next Thursday.\n    - You'll get to work on it in lab next Wednesday, but you should start it before then and go to lab with questions.\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(openintro)\nlibrary(countdown)\nlibrary(palmerpenguins)\nlibrary(ggrepel)\nlibrary(waffle)\nlibrary(scales)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7,        # 7\" width\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300             # higher dpi, sharper image\n)\n```\n:::\n\n\n## From last time\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nduke_forest <- duke_forest |>\n  mutate(\n    decade_built = (year_built %/% 10) * 10,\n    decade_built_cat = case_when(\n      decade_built <= 1940 ~ \"1940 or before\",\n      decade_built >= 1990 ~ \"1990 or after\",\n      TRUE ~ as.character(decade_built)\n    )\n  )\n\nmean_area_decade <- duke_forest |>\n  group_by(decade_built_cat) |>\n  summarise(mean_area = mean(area))\n```\n:::\n\n\n# Geoms\n\n## Geoms\n\n-   Geometric objects, or **geoms** for short, perform the actual rendering of the layer, controlling the type of plot that you create\n\n-   You can think of them as \"the geometric shape used to represent the data\"\n\n## One variable\n\n-   Discrete:\n\n    -   `geom_bar()`: display distribution of discrete variable.\n\n-   Continuous\n\n    -   `geom_histogram()`: bin and count continuous variable, display with bars\n\n    -   `geom_density()`: smoothed density estimate\n\n    -   `geom_dotplot()`: stack individual points into a dot plot\n\n    -   `geom_freqpoly()`: bin and count continuous variable, display with lines\n\n## Aside\n\nAlways use \"typewriter text\" (monospace font) when writing function names, and follow with `()`, e.g.,\n\n-   `geom_freqpoly()`\n\n-   `mean()`\n\n-   `lm()`\n\n## `geom_dotplot()`\n\n::: task\nWhat does each point represent? How are their locations determined? What do the x and y axes represent?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = price)) +\n  geom_dotplot(binwidth = 50000)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-3-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Comparing across groups {.smaller}\n\n::: task\nWhich of the following allows for easier comparison across groups?\n:::\n\n::: panel-tabset\n## Histogram\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = price, fill = decade_built_cat)) +\n  geom_histogram(binwidth = 100000)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Frequency polygon\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = price, color = decade_built_cat)) +\n  geom_freqpoly(binwidth = 100000, size = 1)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## Two variables - both continuous\n\n-   `geom_point()`: scatterplot\n\n-   `geom_quantile()`: smoothed quantile regression\n\n-   `geom_rug()`: marginal rug plots\n\n-   `geom_smooth()`: smoothed line of best fit\n\n-   `geom_text()`: text labels\n\n## Application exercise - Part 1\n\n::: task\n-   Go to the course GitHub organization: <https://github.com/vizdata-s23>\n\n-   Clone the repo called `ae-02-[YOUR-GITHUB-USERNAME]` and work on the exercises for Part 1.\n\n-   Once you're done, share your plots on Slack in #general.\n\n-   Label your chunk(s) and pay attention to code style and formatting!\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_2c774d7e\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Two variables - show density\n\n-   `geom_bin2d()`: bin into rectangles and count\n\n-   `geom_density2d()`: smoothed 2d density estimate\n\n-   `geom_hex()`: bin into hexagons and count\n\n## `geom_hex()`\n\nNot very helpful for 98 observations:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = area, y = price)) +\n  geom_hex()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_hex()`\n\nMore helpful for 53940 observations:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_hex()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_hex()` and warnings\n\n-   Requires installing the [**hexbin**](https://cran.r-project.org/web/packages/hexbin/index.html) package separately!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"hexbin\")\n```\n:::\n\n\n-   Otherwise you might see\n\n```\nWarning: Computation failed in `stat_binhex()`\n```\n\n## Two variables\n\n-   At least one discrete\n\n    -   `geom_count()`: count number of point at distinct locations\n\n    -   `geom_jitter()`: randomly jitter overlapping points\n\n-   One continuous, one discrete\n\n    -   `geom_col()`: a bar chart of pre-computed summaries\n\n    -   `geom_boxplot()`: boxplots\n\n    -   `geom_violin()`: show density of values in each group\n\n## `geom_jitter()` {.smaller}\n\n::: task\nHow are the following three plots different?\n:::\n\n::: panel-tabset\n## Plot A\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = bed, y = price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot B\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot C\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## `geom_jitter()` and `set.seed()` {.smaller}\n\n::: panel-tabset\n## Plot A\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\nggplot(duke_forest, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot B\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\n\nggplot(duke_forest, aes(x = bed, y = price)) +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=2100}\n:::\n:::\n\n:::\n\n## Two variables {.smaller}\n\n-   One time, one continuous\n    -   `geom_area()`: area plot\n    -   `geom_line()`: line plot\n    -   `geom_step()`: step plot\n-   Display uncertainty:\n    -   `geom_crossbar()`: vertical bar with center\n    -   `geom_errorbar()`: error bars\n    -   `geom_linerange()`: vertical line\n    -   `geom_pointrange()`: vertical line with center\n-   Spatial\n    -   `geom_sf()`: for map data (more on this later...)\n\n## Average price per year built {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean_price_year <- duke_forest |>\n  group_by(year_built) |>\n  summarise(\n    n = n(),\n    mean_price = mean(price),\n    sd_price = sd(price)\n    )\n\nmean_price_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 44 × 4\n   year_built     n mean_price sd_price\n        <dbl> <int>      <dbl>    <dbl>\n 1       1923     1     285000      NA \n 2       1934     1     600000      NA \n 3       1938     1     265000      NA \n 4       1940     1     105000      NA \n 5       1941     2     432500   28284.\n 6       1945     2     525000  530330.\n 7       1951     2     567500  258094.\n 8       1952     2     531250  469165.\n 9       1953     2     575000   35355.\n10       1954     4     600000   33912.\n# … with 34 more rows\n```\n:::\n:::\n\n\n## `geom_line()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mean_price_year, aes(x = year_built, y = mean_price)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_area()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mean_price_year, aes(x = year_built, y = mean_price)) +\n  geom_area()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## `geom_step()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mean_price_year, aes(x = year_built, y = mean_price)) +\n  geom_step()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Application exercise - Part 2\n\n::: task\n-   Go to the course GitHub organization: <https://github.com/vizdata-s23>\n\n-   Clone the repo called `ae-02-[YOUR-GITHUB-USERNAME]` and work on the exercises for Part 2.\n\n-   Once you're done, share your plot on Slack in #general.\n\n-   Label your chunk(s) and pay attention to code style and formatting!\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_3f33f49a\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n##  {.center}\n\n::: {.hand .large}\nlet's clean things up a bit!\n:::\n\n## Let's clean things up a bit!\n\n::: panel-tabset\n## Code\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = area, y = price)) +\n  geom_point(alpha = 0.6, size = 2, color = \"#012169\") +\n  scale_x_continuous(labels = label_number(big.mark = \",\")) +\n  scale_y_continuous(labels = label_dollar(scale = 1/1000, suffix = \"K\")) +\n  labs(\n    x = \"Area (square feet)\",\n    y = \"Sale price (USD)\",\n    title = \"Sale prices of homes in Duke Forest\",\n    subtitle = \"As of November 2020\",\n    caption = \"Source: Zillow.com\"\n  )\n```\n:::\n\n:::\n\n## Three variables\n\n-   `geom_contour()`: contours\n-   `geom_tile()`: tile the plane with rectangles\n-   `geom_raster()`: fast version of `geom_tile()` for equal sized tiles\n\n## `geom_tile()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = bed, y = bath)) +\n geom_tile(aes(fill = price))\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Activity: Pick a geom\n\n::: task\nFor each of the following problems, suggest a useful geom:\n\n1.  Display how the value of variable has changed over time\n2.  Show the detailed distribution of a single continuous variable\n3.  Focus attention on the overall relationship between two variables in a large dataset\n4.  Label outlying points in a single variable\n:::\n\nTO DO: ADD SLIDO\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_7f7e2383\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# Stats\n\n## Stats \\< \\> geoms {.smaller}\n\n-   Statistical transformation (**stat**) transforms the data, typically by summarizing\n-   Many of ggplot2's stats are used behind the scenes to generate many important geoms\n\n| `stat`            | geom                                                |\n|-------------------|-----------------------------------------------------|\n| `stat_bin()`      | `geom_bar()`, `geom_freqpoly()`, `geom_histogram()` |\n| `stat_bin2d()`    | `geom_bin2d()`                                      |\n| `stat_bindot()`   | `geom_dotplot()`                                    |\n| `stat_binhex()`   | `geom_hex()`                                        |\n| `stat_boxplot()`  | `geom_boxplot()`                                    |\n| `stat_contour()`  | `geom_contour()`                                    |\n| `stat_quantile()` | `geom_quantile()`                                   |\n| `stat_smooth()`   | `geom_smooth()`                                     |\n| `stat_sum()`      | `geom_count()`                                      |\n\n## A bit more data cleaning\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nduke_forest <- duke_forest |>\n  mutate(\n    parking = case_when(\n      parking == \"0 spaces\" ~ \"Street\",\n      str_detect(parking, \"Carport\") ~ \"Carport\",\n      str_detect(parking, \"Garage\") ~ \"Garage\",\n      str_detect(parking, \"Covered\") ~ \"Covered\",\n      TRUE ~ parking\n    )\n  )\n```\n:::\n\n\n## Layering with stats\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3-6\"}\nggplot(duke_forest, aes(x = parking, y = price)) + \n  geom_point(alpha = 0.5) + \n  stat_summary(\n    geom = \"point\", fun = \"median\", \n    colour = \"red\", size = 5, pch = 4, stroke = 2\n  )\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Alternate: layering with stats\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"3-6\"}\nggplot(duke_forest, aes(x = parking, y = price)) + \n  geom_point(alpha = 0.5) + \n  geom_point(\n    stat = \"summary\", fun = \"median\", \n    colour = \"red\", size = 5, pch = 4, stroke = 2\n  )\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n## Statistical transformations\n\n::: task\nWhat can you say about the distribution of price from the following QQ plot?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\nggplot(duke_forest, aes(sample = price)) +\n  stat_qq() +\n  stat_qq_line() +\n  labs(y = \"price\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=2400}\n:::\n:::\n\n\n# Scales\n\n## What is a scale?\n\n-   Each scale is a function from a region in data space (the domain of the scale) to a region in aesthetic space (the range of the scale)\n\n-   The axis or legend is the inverse function: it allows you to convert visual properties back to data\n\n## Scale specification {.smaller}\n\nEvery aesthetic in your plot is associated with exactly one scale:\n\n::: columns\n::: {.column width=\"50%\"}\nAutomatic scales:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  duke_forest, \n  aes(x = area, y = price, color = parking)\n) + \n  geom_point(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nManual scales:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  duke_forest, \n  aes(x = area, y = price, color = parking)\n) + \n  geom_point(alpha = 0.8) +\n  scale_x_continuous() + \n  scale_y_continuous() + \n  scale_colour_discrete()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-29-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n:::\n\n## Anatomy of a scale function\n\n<br>\n\n::: {.large style=\"text-align: center;\"}\n`scale_A_B()`\n:::\n\n<br>\n\n-   Always starts with `scale`\n-   `A`: Name of the primary aesthetic (e.g., `colour`, `shape`, `x`)\n-   `B`: Name of the scale (e.g., `continuous`, `discrete`, `brewer`)\n\n## Guess the output\n\n::: task\nWhat will the x-axis label of the following plot say?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = area, y = price, color = parking)) + \n  geom_point(alpha = 0.8) +\n  scale_x_continuous(name = \"Area\") +\n  scale_x_continuous(name = \"Area (sq ft)\")\n```\n:::\n\n\n## \"Address\" messages\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = area, y = price, color = parking)) + \n  geom_point(alpha = 0.8) +\n  scale_x_continuous(name = \"Area\") +\n  scale_x_continuous(name = \"Area (sq ft)\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing\nscale.\n```\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Guess the output\n\n::: task\nWhat happens if you pair a discrete variable with a continuous scale? What happens if you pair a continuous variable with a discrete scale? Answer in the context of the following plots.\n:::\n\n::: panel-tabset\n## Plots\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = parking, y = price)) + \n  geom_point(alpha = 0.5) +\n  scale_x_continuous()\n\nggplot(duke_forest, aes(x = parking, y = price)) + \n  geom_point(alpha = 0.5) +\n  scale_y_discrete()\n```\n:::\n\n\n## Discuss\n\nTO DO: ADD SLIDO\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_a7da7de4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Transformations {.smaller}\n\nWhen working with continuous data, the default is to map linearly from the data space onto the aesthetic space, but this scale can be transformed.\n\n::: columns\n::: {.column width=\"50%\"}\nLinear:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  duke_forest, \n  aes(x = area, y = price)\n) + \n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-34-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\nTransformed:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  duke_forest, \n  aes(x = area, y = price)\n) + \n  geom_point(alpha = 0.5) +\n  scale_y_continuous(trans = \"log10\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n:::\n\n## Continuous scale transformations {.smaller}\n\n| Name       | Function $f(x)$         | Inverse $f^{-1}(y)$  |\n|------------|-------------------------|----------------------|\n| asn        | $\\tanh^{-1}(x)$         | $\\tanh(y)$           |\n| exp        | $e ^ x$                 | $\\log(y)$            |\n| identity   | $x$                     | $y$                  |\n| log        | $\\log(x)$               | $e ^ y$              |\n| log10      | $\\log_{10}(x)$          | $10 ^ y$             |\n| log2       | $\\log_2(x)$             | $2 ^ y$              |\n| logit      | $\\log(\\frac{x}{1 - x})$ | $\\frac{1}{1 + e(y)}$ |\n| pow10      | $10^x$                  | $\\log_{10}(y)$       |\n| probit     | $\\Phi(x)$               | $\\Phi^{-1}(y)$       |\n| reciprocal | $x^{-1}$                | $y^{-1}$             |\n| reverse    | $-x$                    | $-y$                 |\n| sqrt       | $x^{1/2}$               | $y ^ 2$              |\n\n## Convenience functions for transformations {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  duke_forest, \n  aes(x = area, y = price)\n) + \n  geom_point(alpha = 0.5) +\n  scale_y_continuous(trans = \"log10\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-36-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  duke_forest, \n  aes(x = area, y = price)\n) + \n  geom_point(alpha = 0.5) +\n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n:::\n\n## Scale transform vs. data transform {.smaller}\n\n::: task\nHow are the following two plots different, how are they similar? What does this say about how scale transformations work.\n:::\n\n::: panel-tabset\n## Plot A\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nduke_forest |>\n  mutate(price_log10 = log(price, base = 10)) |>\n  ggplot(aes(x = area, y = price_log10)) + \n  geom_point(alpha = 0.5)\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-39-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n:::\n\n## Plot B\n\n::: columns\n::: {.column width=\"60%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(duke_forest, aes(x = area, y = price)) + \n  geom_point(alpha = 0.5) +\n  scale_y_log10()\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-41-1.png){fig-align='center' width=1200}\n:::\n:::\n\n:::\n:::\n\n## Discuss\n\nTO DO: ADD SLIDO\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_824842ab\" data-update-every=\"1\" tabindex=\"0\" style=\"bottom:0;left:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# Coordinate systems\n\n## Coordinate systems: purpose\n\n-   Combine the two position aesthetics (`x` and `y`) to produce a 2d position on the plot:\n    -   linear coordinate system: horizontal and vertical coordinates\n    -   polar coordinate system: angle and radius\n    -   maps: latitude and longitude\n-   Draw axes and panel backgrounds in coordination with the faceter coordinate systems\n\n## Coordinate systems: types\n\n1.  **Linear coordinate systems:** preserve the shape of geoms\n\n-   `coord_cartesian()`: the default Cartesian coordinate system, where the 2d position of an element is given by the combination of the x and y positions.\n-   `coord_fixed()`: Cartesian coordinate system with a fixed aspect ratio. *(useful only in limited circumstances)*\n\n. . . \n\n2. **Non-linear coordinate systems:** can change the shapes -- a straight line may no longer be straight. The closest distance between two points may no longer be a straight line.\n\n-   `coord_trans()`: Apply arbitrary transformations to x and y positions, after the data has been processed by the stat\n-   `coord_polar()`: Polar coordinates\n-   `coord_sf()`: Map projections\n\n## Setting limits: what the plots say {.smaller}\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  labs(title = \"Plot 1\")\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  scale_x_continuous(limits = c(190, 220)) + scale_y_continuous(limits = c(4000, 5000)) +\n  labs(title = \"Plot 2\")\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  xlim(190, 220) + ylim(4000, 5000) +\n  labs(title = \"Plot 3\")\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  coord_cartesian(xlim = c(190,220), ylim = c(4000, 5000)) +\n  labs(title = \"Plot 4\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/set-limits-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/set-limits-2.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/set-limits-3.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/set-limits-4.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Setting limits: what the warnings say {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  labs(title = \"Plot 1\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  scale_x_continuous(limits = c(190, 220)) + scale_y_continuous(limits = c(4000, 5000)) +\n  labs(title = \"Plot 2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  xlim(190, 220) + ylim(4000, 5000) +\n  labs(title = \"Plot 3\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + geom_smooth() +\n  coord_cartesian(xlim = c(190,220), ylim = c(4000, 5000)) +\n  labs(title = \"Plot 4\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n:::\n\n\n## Setting limits\n\n-   Setting scale limits: Any data outside the limits is thrown away\n    -   `scale_*_continuous()`, `xlim` and `ylim` arguments\n    -   `xlim()` and `ylim()`\n-   Setting coordinate system limits: Use all the data, but only display a small region of the plot (zooming in)\n    -   `coord_cartesian()`, `xlim` and `ylim` arguments\n\n## Fixing aspect ratio with `coord_fixed()` {.smaller}\n\nUseful when having an aspect ratio of 1 makes sense, e.g. scores on two tests (reading and writing) on the same scale (0 to 100 points)\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggplot(hsb2, aes(x = read, y = write)) +\n  geom_point() + geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"gray\") +\n  labs(title = \"Not fixed\")\n\nggplot(hsb2, aes(x = read, y = write)) +\n  geom_point() + geom_smooth(method = \"lm\") +\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"gray\") +\n  coord_fixed() +\n  labs(title = \"Fixed\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-45-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-45-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Transformations {.smaller}\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = bill_depth_mm, y = body_mass_g)) +\n  geom_point() + geom_smooth(method = \"lm\") +\n  labs(title = \"Plot 1\")\n\nggplot(penguins, aes(x = bill_depth_mm, y = body_mass_g)) +\n  geom_point() + geom_smooth(method = \"lm\") +\n  scale_x_log10() + scale_y_log10() +\n  labs(title = \"Plot 2\")\n\nggplot(penguins, aes(x = bill_depth_mm, y = body_mass_g)) +\n  geom_point() + geom_smooth(method = \"lm\") +\n  coord_trans(x = \"log10\", y = \"log10\") +\n  labs(title = \"Plot 3\")\n\nggplot(penguins, aes(x = log(bill_depth_mm, base = 10), y = log(body_mass_g, base = 10))) +\n  geom_point() + geom_smooth(method = \"lm\") +\n  labs(title = \"Plot 4\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/transformations-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/transformations-2.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/transformations-3.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/transformations-4.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Pie charts and bullseye charts with `coord_polar()`\n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = 1, fill = species)) +\n  geom_bar() +\n  labs(title = \"Stacked bar chart\")\n\nggplot(penguins, aes(x = 1, fill = species)) +\n  geom_bar() +\n  coord_polar(theta = \"y\") +\n  labs(title = \"Pie chart\")\n\nggplot(penguins, aes(x = 1, fill = species)) +\n  geom_bar() +\n  coord_polar(theta = \"x\") +\n  labs(title = \"Bullseye chart\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-47-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-47-2.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-47-3.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## \n\n::: hand\naside: about pie charts...\n:::\n\n## Pie charts\n\n::: task\nWhat do you know about pie charts and data visualization best practices? Love 'em or lose 'em?\n:::\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-48-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-48-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Pie charts: when to love 'em, when to lose 'em\n\nFor categorical variables with few levels, bar charts can work well\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\npie_homeownership\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-49-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\nloans %>%\n  ggplot(aes(x = homeownership, fill = homeownership)) +\n  geom_bar(show.legend = FALSE) +\n  scale_fill_openintro(\"hot\") +\n  labs(x = \"Homeownership\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-49-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Pie charts: when to love 'em, when to lose 'em\n\nFor categorical variables with many levels, bar charts are difficult to read\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\npie_loan_grades\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-50-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code}\nloans |>\n  ggplot(aes(x = grade, fill = grade)) +\n  geom_bar(show.legend = FALSE) +\n  scale_fill_openintro(\"cool\") +\n  labs(x = \"Loan grade\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-50-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Waffle charts\n\n-   Like with pie charts, work best when the number of levels represented is low\n-   Unlike pie charts, easier to compare proportions that represent non-simple fractions\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-51-1.png){fig-align='center' width=2100}\n:::\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-51-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Waffle charts: making of\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\npenguins |>\n  count(species) |>\n  ggplot(aes(fill = species, values = n)) +\n  geom_waffle(colour = \"white\", flip = TRUE, make_proportional = TRUE) +\n  labs(fill = NULL, title = \"Penguin species\")\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-52-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Waffle charts: enhanced theme\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\npenguins |>\n  count(species) |>\n  ggplot(aes(fill = species, values = n)) +\n  geom_waffle(colour = \"white\", flip = TRUE, make_proportional = TRUE) +\n  labs(fill = NULL, title = \"Penguin species\") +\n  theme_enhance_waffle()\n```\n\n::: {.cell-output-display}\n![](02-layers-2_files/figure-revealjs/unnamed-chunk-53-1.png){fig-align='center' width=2100}\n:::\n:::\n",
    "supporting": [
      "02-layers-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}