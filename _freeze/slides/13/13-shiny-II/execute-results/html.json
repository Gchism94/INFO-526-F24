{
  "hash": "cc466618c40ba8e0ea4284978275ecfd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Interactive reporting + visualization with Shiny II\nsubtitle: Lecture 13\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: 800px, cover\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\n  warning: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Another Shiny App!\n\n## Ultimate goal\n\n::: {.medium .center-align}\n[https://minecr.shinyapps.io/manager-survey](https://minecr.shinyapps.io/manager-survey/)\n:::\n\n\n::: {.cell}\n<iframe src=\"https://minecr.shinyapps.io/manager-survey/?showcase=0\" width=\"960\" height=\"550px\" data-external=\"1\"></iframe>\n:::\n\n\n# Interactive reporting with Shiny\n\n## Livecoding\n\n::: task\nCode along in `manager-survey/app.R`. (part 1)\n:::\n\n<br>\n\nHighlights:\n\n-   Data pre-processing\n\n-   Basic reactivity\n\n## Livecoding\n\n::: task\nCode along in `manager-survey/app.R`. (part 2)\n:::\n\n<br>\n\nHighlights:\n\n-   Data pre-processing outside of the app\n-   Tabsets\n-   Validation\n\n# Interactive visualizations with Shiny\n\n## Livecoding\n\n::: task\nCode along in `manager-survey/app.R` (part 3)\n:::\n\n<br>\n\nHighlights:\n\n-   Conditional panels\n-   Linked brushing\n\n## Reference\n\nThe code for the app can be found [here](https://github.com/INFO-526-S24/shiny-ex-2).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages ----------------------------------------------------------------\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(countrycode)\n\n# Load data --------------------------------------------------------------------\n\nmanager_survey <- read_rds(\"data/manager-survey.rds\")\n\n# Find all industries ----------------------------------------------------------\n\nindustry_choices <- manager_survey |>\n  distinct(industry_other) |>\n  arrange(industry_other) |>\n  pull(industry_other)\n\n# Randomly select 3 industries to start with -----------------------------------\n\nselected_industry_choices <- sample(industry_choices, 3)\n\n# Define UI --------------------------------------------------------------------\n\nui <- fluidPage(\n  titlePanel(title = \"Ask a Manager\"),\n  sidebarLayout(\n    \n    # Sidebar panel\n    sidebarPanel(\n      checkboxGroupInput(\n        inputId = \"industry\",\n        label = \"Select up to 8 industies:\",\n        choices = industry_choices,\n        selected = selected_industry_choices\n      ),\n    ),\n    \n    # Main panel\n    mainPanel(\n      hr(),\n      \"Showing only results for those with salaries in USD who have provided information on their industry and highest level of education completed.\",\n      br(), br(),\n      textOutput(outputId = \"selected_industries\"),\n      hr(),\n      br(),\n      tabsetPanel(\n        type = \"tabs\",\n        tabPanel(\"Average salaries\", plotOutput(outputId = \"avg_salary_plot\")),\n        tabPanel(\n          \"Individual salaries\",\n          conditionalPanel(\n            condition = \"input.industry.length <= 8\",\n            sliderInput(\n              inputId = \"ylim\",\n              label = \"Zoom in to salaries between\",\n              min = 0,\n              value = c(0, 1000000),\n              max = max(manager_survey$annual_salary),\n              width = \"100%\"\n            )\n          ),\n          plotOutput(outputId = \"indiv_salary_plot\", brush = \"indiv_salary_brush\"),\n          tableOutput(outputId = \"indiv_salary_table\")\n        ),\n        tabPanel(\"Data\", DT::dataTableOutput(outputId = \"data\"))\n      )\n    )\n    \n  )\n)\n\n# Define server function -------------------------------------------------------\n\nserver <- function(input, output, session) {\n  \n  # Print number of selected industries\n  output$selected_industries <- reactive({\n    paste(\"You've selected\", length(input$industry), \"industries.\")\n  })\n  \n  # Filter data for selected industries\n  manager_survey_filtered <- reactive({\n    manager_survey |>\n      filter(industry_other %in% input$industry)\n  })\n  \n  # Make a table of filtered data\n  output$data <- DT::renderDataTable({\n    manager_survey_filtered() |>\n      select(\n        industry,\n        job_title,\n        annual_salary,\n        other_monetary_comp,\n        country,\n        overall_years_of_professional_experience,\n        years_of_experience_in_field,\n        highest_level_of_education_completed,\n        gender,\n        race\n      )\n  })\n  \n  # Futher filter for salary range\n  observeEvent(input$industry, {\n    updateSliderInput(\n      inputId = \"ylim\",\n      min = min(manager_survey_filtered()$annual_salary),\n      max = max(manager_survey_filtered()$annual_salary),\n      value = c(\n        min(manager_survey_filtered()$annual_salary),\n        max(manager_survey_filtered()$annual_salary)\n      )\n    )\n  })\n  \n  # Plot of jittered salaries from filtered data\n  output$indiv_salary_plot <- renderPlot({\n    \n    validate(\n      need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n    )\n    \n    ggplot(\n      manager_survey_filtered(),\n      aes(\n        x = highest_level_of_education_completed,\n        y = annual_salary,\n        color = industry\n      )\n    ) +\n      geom_jitter(size = 2, alpha = 0.6) +\n      theme_minimal(base_size = 16) +\n      theme(legend.position = \"top\") +\n      scale_color_colorblind() +\n      scale_x_discrete(labels = label_wrap_gen(10)) +\n      scale_y_continuous(\n        limits = input$ylim,\n        labels = label_dollar()\n      ) +\n      labs(\n        x = \"Highest level of education completed\",\n        y = \"Annual salary\",\n        color = \"Industry\",\n        title = \"Individual salaries\"\n      )\n  })\n  \n  # Linked brushing\n  output$indiv_salary_table <- renderTable({\n    brushedPoints(manager_survey_filtered(), input$indiv_salary_brush)\n  })\n  \n  # Plot of average salaries from filtered data\n  output$avg_salary_plot <- renderPlot({\n    \n    validate(\n      need(length(input$industry) <= 8, \"Please select a maxiumum of 8 industries.\")\n    )\n    \n    manager_survey_filtered() |>\n      group_by(industry, highest_level_of_education_completed) |>\n      summarise(\n        mean_annual_salary = mean(annual_salary, na.rm = TRUE),\n        .groups = \"drop\"\n      ) |>\n      ggplot(aes(\n        x = highest_level_of_education_completed,\n        y = mean_annual_salary,\n        group = industry,\n        color = industry\n      )) +\n      geom_line(linewidth = 1) +\n      theme_minimal(base_size = 16) +\n      theme(legend.position = \"top\") +\n      scale_color_colorblind() +\n      scale_x_discrete(labels = label_wrap_gen(10)) +\n      scale_y_continuous(labels = label_dollar()) +\n      labs(\n        x = \"Highest level of education completed\",\n        y = \"Mean annual salary\",\n        color = \"Industry\",\n        title = \"Average salaries\"\n      )\n  })\n}\n\n\n# Create the Shiny app object --------------------------------------------------\n\nshinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}