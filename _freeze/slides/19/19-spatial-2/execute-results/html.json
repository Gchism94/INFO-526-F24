{
  "hash": "0bc60e0556e201799a876bf69955308b",
  "result": {
    "markdown": "---\ntitle: Visualizing geospatial data I\nsubtitle: Lecture 18\ntitle-slide-attributes:\n  data-background-image: ../vizdata-bg.png\n  data-background-size: stretch\n  data-slide-number: none\nformat: revealjs\nhighlight-style: a11y\nexecute:\n  code-link: true\n  warning: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Warm up\n\n## Announcements\n\n-   \n\n## Setup {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(countdown)\nlibrary(tidyverse)\n\n# set theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))\n\n# set width of code output\noptions(width = 65)\n\n# set figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 7,        # 7\" width\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 300             # higher dpi, sharper image\n)\n```\n:::\n\n\n\nclass: middle, inverse\n\n# Using \\*\\*sf\\*\\*\n\n\\-\\--\n\n## Simple Features for R\n\n\\`\\`\\`{r echo = FALSE, fig.alt = \"Simple features for R\", out.width = \"60%\"}\nknitr::include_graphics(\"images/sf.jpeg\")\n\\`\\`\\`\n\n.footnote\\[\nIllustration by Allison Horst\n\\]\n\n\\-\\--\n\n## Simple features\n\n\\`\\`\\`{r echo = FALSE, fig.alt = \"Simple features\", out.width = \"70%\"}\nknitr::include_graphics(\"images/simple-features.png\")\n\\`\\`\\`\n\n.footnote\\[\nSource: \\[Simple Features for R\\](https://r-spatial.github.io/sf/articles/sf1.html#sf-objects-with-simple-features-1)\n\\]\n\n\\-\\--\n\n## The sf package\n\n.pull-left\\[\nA package that provides simple features access for R\n\n- represents simple features as records in a \\`data.frame\\` or \\`tibble\\` with a \\`geometry\\` list-column\n- represents natively in R all 17 simple feature types for all dimensions\n- ...\n\n\\<br\\>\n\nLearn more at \\[r-spatial.github.io/sf\\](https://r-spatial.github.io/sf).\n\\]\n.pull-right\\[\n\\`\\`\\`{r echo = FALSE, fig.alt = \"Hex logo for sf\", out.width = \"50%\"}\nknitr::include_graphics(\"images/sf-hex.gif\")\n\\`\\`\\`\n\\]\n\n\\-\\--\n\n## Get world data\n\nUsing the \\*\\*rnaturalearth\\*\\* package\n\n\\`\\`\\`{r}\nworld \\<- ne_countries(scale = \"medium\", returnclass = \"sf\")\nclass(world)\n\\`\\`\\`\n\n\\-\\--\n\n## sf geometry\n\n.small\\[\n\\`\\`\\`{r}\nworld %\\>% select(geometry)\n\\`\\`\\`\n\\]\n\n\\-\\--\n\n## Map the world with sf\n\n\\`\\`\\`{r}\nggplot(data = world) +\n geom_sf() #\\<\\<\n\\`\\`\\`\n\n\\-\\--\n\n## Plays nicely with ggplot2\n\n\\`\\`\\`{r}\nggplot(data = world) +\n geom_sf(fill = \"cornsilk\", size = 0.2) +\n labs(x = \"Longitude\", y = \"Latitude\", title = \"World map\") +\n theme(panel.background = element_rect(\"lightblue\"))\n\\`\\`\\`\n\n\\-\\--\n\n## Plays nicely with ggplot2\n\n\\`\\`\\`{r}\nggplot(data = world) +\n geom_sf(aes(fill = pop_est)) +\n scale_fill_viridis_c(option = \"plasma\", trans = \"sqrt\")\n\\`\\`\\`\n\n\\-\\--\n\n## Projections with sf\n\n\\`\\`\\`{r}\nggplot(data = world) +\n geom_sf() +\n coord_sf( #\\<\\<\n crs = \"+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs \" #\\<\\<\n ) #\\<\\<\n\\`\\`\\`\n\n\\-\\--\n\n## Scale bar and North arrow\n\nUsing the \\*\\*ggspatial\\*\\* package\n\n\\`\\`\\`{r}\nggplot(data = world) +\n geom_sf(fill = \"cornsilk\") +\n annotation_scale(location = \"bl\", width_hint = 0.4) +\n annotation_north_arrow(\n location = \"bl\", which_north = \"true\", \n pad_x = unit(0.5, \"in\"), pad_y = unit(0.3, \"in\"),\n style = north_arrow_fancy_orienteering) +\n coord_sf(xlim = c(24, 45), ylim = c(32, 43))\n\\`\\`\\`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}